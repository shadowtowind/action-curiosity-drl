import rospy
import openpyxl
from std_msgs.msg import String, Float32, Empty, Float32MultiArray

start_epochs = 0
start_avg_ret = 0

ret = []
avg_ret = []
endtype = []
endtype_dict = {"goal": 0, "collision": 0, "overstep": 0}

q_value = []
loss_q = []
loss_pi = []

path = []

def resetDatas(data):
	global ret
	global avg_ret
	global endtype
	global endtype_dict

	ret = []
	avg_ret = []
	endtype = []
	endtype_dict["goal"] = 0
	endtype_dict["collision"] = 0
	endtype_dict["overstep"] = 0
	rospy.loginfo('DataSaver: reset data')

def saveDatas(data):
	global start_epochs
	global ret
	global avg_ret
	global endtype
	global endtype_dict
	global q_value
	global loss_q
	global loss_pi
	global path
	
	workbook = openpyxl.Workbook()
	
	worksheet = workbook.active
	worksheet.title = 'return'
	tabular1 = ['epoch', 'ret', 'avg_ret', 'endtype']
	for i in range(len(tabular1)):
		worksheet.cell(1, i+1, tabular1[i])
	for i in range(len(ret)):
		worksheet.cell(i+2, 1, start_epochs+i+1)
	for i in range(len(ret)):
		worksheet.cell(i+2, 2, ret[i])
	for i in range(len(avg_ret)):
		worksheet.cell(i+2, 3, avg_ret[i])
	for i in range(len(endtype)):
		worksheet.cell(i+2, 4, endtype[i])
	
	worksheet2 = workbook.create_sheet()
	worksheet2.title = 'endtype'
	worksheet2.cell(1, 1, 'goal')
	worksheet2.cell(1, 2, 'collision')
	worksheet2.cell(1, 3, 'overstep')
	worksheet2.cell(2, 1, endtype_dict['goal'])
	worksheet2.cell(2, 2, endtype_dict['collision'])
	worksheet2.cell(2, 3, endtype_dict['overstep'])

	worksheet3 = workbook.create_sheet()
	worksheet3.title = 'iteration'
	tabular3 = ['times', 'q_value', 'loss_q', 'loss_pi']
	for i in range(len(tabular3)):
		worksheet3.cell(1, i+1, tabular3[i])
	for i in range(len(q_value)):
		worksheet3.cell(i+2, 1, i+1)
	for i in range(len(q_value)):
		worksheet3.cell(i+2, 2, q_value[i])
	for i in range(len(loss_q)):
		worksheet3.cell(i+2, 3, loss_q[i])
	for i in range(len(loss_pi)):
		worksheet3.cell(i+2, 4, loss_pi[i])

	if len(path) > 0:
		worksheet3 = workbook.create_sheet()
		worksheet3.title = 'path'
		for i in range(len(path)):
			worksheet3.cell(1, 2*i+1, 'path_'+str(i+1)+'_x')
			worksheet3.cell(1, 2*i+2, 'path_'+str(i+1)+'_y')
			for j in range(len(path[i])):
				worksheet3.cell(j+2, 2*i+1, path[i][j][0])
				worksheet3.cell(j+2, 2*i+2, path[i][j][1])

	workbook.save(filename="/home/zsw/catkin_ws/src/turtlebot3_drl_pp/results/"+str(data.data)+".xlsx")

def updateEndType(data):
	global endtype
	global endtype_dict
	if (data.data == 'goal'):
		endtype.append(data.data)
		endtype_dict["goal"] += 1
	elif (data.data == 'collision'):
		endtype.append(data.data)
		endtype_dict["collision"] += 1
	elif (data.data == 'overstep'):
		endtype.append(data.data)
		endtype_dict["overstep"] += 1

def updateRet(data):
	global start_epochs
	global start_avg_ret
	global ret
	global avg_ret
	ret.append(data.data)

	avg_ret_value = ( start_epochs * start_avg_ret + sum(ret) ) / ( start_epochs + len(ret) )
	avg_ret.append(avg_ret_value)

def updateQloss(data):
	global q_value
	global loss_q
	global loss_pi

	q_value.append(data.data[0])
	loss_q.append(data.data[1])
	loss_pi.append(data.data[2])

def addPath(data):
	global path
	path.append([])

def addPoint(data):
	global path
	path[len(path)-1].append(data.data)

if __name__ == '__main__':
	rospy.init_node('save_datas')
	rospy.Subscriber("save_datas/epoch_end_type", String, updateEndType)
	rospy.Subscriber("save_datas/epoch_return", Float32, updateRet)
	rospy.Subscriber("save_datas/q_loss", Float32MultiArray, updateQloss)
	rospy.Subscriber("save_datas/reset", Empty, resetDatas)
	rospy.Subscriber("save_datas", String, saveDatas)
	rospy.Subscriber("save_datas/add_path", Empty, addPath)
	rospy.Subscriber("save_datas/add_point", Float32MultiArray, addPoint)
	rospy.spin()