#!/usr/bin/env python3.9

from copy import deepcopy
import rospy
import numpy as np
import torch
from torch.optim import Adam
import time
import datetime
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from src.envs.core import Env
import src.ddpg.core as core
from src.util.core import EpochDataSaver
from std_msgs.msg import Float32, String, Empty

def ddpg_fg_test(seed=0, start_epochs=0, max_epochs=300, save_freq_epochs=100, max_epoch_steps=100,
			with_attention=True, with_dueling=True):

	torch.manual_seed(seed)
	np.random.seed(seed)

	rospy.init_node('stage_3_ddpg_fg_test')

	goals = ((2,2), (-1,2), (-2,2), (-2,-1), (-2,-2), (2,-2))

	env = Env(fix_goal=True, goals=goals)
	eds = EpochDataSaver()

	ac = core.ActorCritic(env.obs_dim, env.scan_dim, env.act_dim, with_attention, with_dueling)

	file_name='paper/boae-acm/stage_2_train_2000epochs_2024-02-22-22-51'
	ac.load_state_dict(torch.load('/home/zsw/catkin_ws/src/turtlebot3_drl_pp/results/'+file_name+'.pt'))
	print('DRL_Model: Load model from', file_name)
	
	def get_action(o):
		a = ac.act(torch.as_tensor(o, dtype=torch.float32))
		return a

	for e in range(max_epochs-start_epochs):
		env.goal.set_goal_position()
		ep_start_time = time.time()
		ep_ret, ep_len, ep_time = 0, 0, 0
		o, dif = env.reset()
		d = False
		while(d == False):
			a = get_action(o)
			o2, dif2, r, d, dr = env.step(a)
			ep_ret += r
			ep_len += 1
			if ep_len == max_epoch_steps and d == False:
				d = True
				dr = 'overstep'
			o = o2
			dif = dif2

		ep_time = round(time.time() - ep_start_time, 4)
		ep_goal = '(' + str(env.goal.goal_x) + ',' + str(env.goal.goal_y) + ')'
		eds.push_data(ep_goal, ep_ret, ep_len, ep_time, dr)
		rospy.loginfo('EpochLogger: epoch=%s ep_ret=%f ep_len=%s ep_time=%s done_reason=%s', start_epochs+e+1, ep_ret, ep_len, str(ep_time), dr)
		
		if (start_epochs+e+1) %	save_freq_epochs == 0:
	
			name = 'stage_2_train_' + str(start_epochs+e+1) + 'epochs_' + datetime.datetime.now().strftime("%Y-%m-%d-%H-%M")
			eds.save_data_excel(name)
			# env.ps.save_paths(name)
	env.reset(end=True)

			
if __name__ == '__main__':
	ddpg_fg_test()
