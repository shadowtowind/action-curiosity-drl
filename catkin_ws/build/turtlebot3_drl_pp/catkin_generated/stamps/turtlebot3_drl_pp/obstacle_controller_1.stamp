import rospy
import time
from gazebo_msgs.msg import ModelState, ModelStates
from gazebo_msgs.srv import GetModelState, GetModelStateRequest

# -2,1 -> 0,1
class Obstacle1():
    def __init__(self):
        self.pub_model = rospy.Publisher('/gazebo/set_model_state', ModelState, queue_size=10)
        self.get_state_service = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
        self.state = 0
        rospy.init_node('control_obstacle_1')

    def moving(self):
        while not rospy.is_shutdown():
            rospy.wait_for_service('/gazebo/get_model_state')
            req = GetModelStateRequest()
            req.model_name = 'obstacle_1'
            model = self.get_state_service(req)

            obstacle_1 = ModelState()
            obstacle_1.model_name = 'obstacle_1'
            obstacle_1.pose = model.pose
            if abs(obstacle_1.pose.position.x + 2) < 0.05 and abs(obstacle_1.pose.position.y - 1) < 0.05:
                self.state = 0

            if self.state == 0:
                obstacle_1.pose.position.x += 0.01
                if abs(obstacle_1.pose.position.x - 0) < 0.05 and abs(obstacle_1.pose.position.y - 1) < 0.05:
                    self.state = 1

            elif self.state == 1:
                obstacle_1.pose.position.x -= 0.01
                if abs(obstacle_1.pose.position.x + 2) < 0.05 and abs(obstacle_1.pose.position.y - 1) < 0.05:
                    self.state = 0

            self.pub_model.publish(obstacle_1)
            time.sleep(0.1)

if __name__ == '__main__':
    obstacle1 = Obstacle1()
    try:
        obstacle1.moving()
    except rospy.ROSInterruptException:
        pass
